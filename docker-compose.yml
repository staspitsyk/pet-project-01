version: '3'

services:
  nest-service:
    container_name: nest-app-container
    image: nest-api-image
    build:
      dockerfile: Dockerfile
      context: .
    ports:
      - 3000:3000
    networks:
      - backend_network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DB_TYPE=${DB_TYPE}
      - PG_HOST=${PG_HOST}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DB=${PG_DB}
      - PG_PORT=${PG_PORT}
      - MONGO_NAME=${MONGO_NAME}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_URI=${MONGO_URI}
    depends_on:
      - postgres
      - kafka
      - mongo
      - redis

  postgres:
    container_name: postgres-db
    image: postgres:12
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/dbDumpFile:/dbDumpFile
      - /var/run/docker.sock:/var/run/docker.sock

  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - backend_network
    volumes:
      - redis:/data

  mongo:
    image: mongo:7.0
    container_name: mongo-docker
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_USER}
    ports:
      - "27017:27017"
    networks:
      - backend_network
        
  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    ports:
      - "28081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: mongo
      ME_CONFIG_BASICAUTH_PASSWORD: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_USER}
    depends_on:
      - mongo
    networks:
      - backend_network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - backend_network
    ports:
      - '5050:80'
    depends_on:
      - postgres

  kafka:
    image: confluentinc/cp-kafka:6.0.14
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:9092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - backend_network

  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.14
    ports:
      - '22181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data: {}
  redis:
    driver: local